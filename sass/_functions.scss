/*
# Strip units from a number with units.

```scss
$number: strip-units(3px);
```

Output:

```scss
$number => 3
```

 */
@function strip-units($number) {
    @return $number / ($number * 0 + 1);
}

/*
# Replace a string with another string

```scss
$output: str-replace('something here {might} change', '{might}', 'will');
$output => 'something here will change'
```

Output:

```scss
$output => 'something here will change'
```

 */
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
    
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + 
      str-replace(
        str-slice($string, $index + str-length($search)), 
        $search, 
        $replace
      );
  }
    
  @return $string;
}

/*
# CSS property generator with a specific properties

```scss
@include properties(( float: left, padding: 0 ));
```

Output:

```scss
float: left;
padding: 0;
```

 */
@mixin properties($properties) {
  @each $property, $value in $properties {
    #{$property}: #{$value};
  }
}

/*
# CSS class generator with a specific name and properties

```scss
@include createSelector('Px-xs', ('padding-left': 1em, 'padding-right': 1em));
```

Output:

```scss
.Px-xs {
    padding-left: 1em;
    padding-right: 1em;
}
```

 */

@mixin createSelector($selectorName, $properties) {
    .#{$selectorName} {
        @include properties($properties)
    }
}


/*
# Generate multiple css classes according to values

```scss
@include createMultipleSelectors('f-{key}', ('white': #fff, 'black': #000), 'color');
```

Output:

```scss
.f-white {
    color: #fff;
}
```

 */
@mixin createMultipleSelectors($selectorName, $values, $property) {
    @each $name, $val in $values {
        $newSelector: str-replace($selectorName, '{key}', $name);
        @include createSelector(#{$newSelector}, ($property: $val));
    }
}

/*
# Generate multiple selectors (TBD)

```scss
$output: generateMultipleSelectors('Px', (xs, sm, md));
```

Output

```scss
$output => (xs: 'Px-xs', sm: 'Px-sm', md: 'Px-md');
```
 */
@function generateMultipleSelectors($selectorNamePrefix, $selectorGeneratorIds) {
    $selectors: ();
    @each $id in $selectorGeneratorIds {
        $selectors: map-merge($selectors, $selectorNamePrefix + '-' + $id);
    }

    @return $selectors; // $selectors: ('xs': 'Px-xs', 'sm': 'Px-sm'...)
}

/*
multipleDefinitions('f-{key}', (sm: 0.7em, md: 1.2em, lg: 2.5em), ('font-size'));

/*
(
  f-sm: (font-size: 0.7em),
  f-md: (font-size: 1.2em),
  f-lg: (font-size: 2.5em)
)
*/
@function multipleDefinitions($selectorNameScheme, $selectorKeysAndPropertyValues, $properties) {
  $definitions: ();
  @each $selectorKey, $propValue in $selectorKeysAndPropertyValues {
    $selectorName: str-replace($selectorNameScheme, '{key}', $selectorKey);
    $propertiesWithValues: ();
    @each $property in $properties {
      $propertiesWithValues: map-merge($propertiesWithValues, ($property: $propValue));
    }
    $definition: ( #{$selectorName}: $propertiesWithValues);
    $definitions: map-merge($definitions, $definition);
  }
  @return $definitions;
}

/*
Create multiple class definitions in a map (multiplied by directions and another key/value map). For example:



```sass
$dirs: (t: (top), b: (bottom));
$sizes: (sm: 0.5em, md: 1em);

directionalDefinitions(
  'P{dirKey}-{key}', $sizes, 'padding-{dir}', $dirs
);

// (
//   Pt-sm: (padding-top: 0.5em),
//   Pb-sm: (padding-bottom: 0.5em),
//   Pt-md: (padding-top: 1em),
//   Pb-md: (padding-bottom: 1em)
// )

```
 */
@function directionalDefinitions($selectorScheme, $selectorKeysAndPropertyValues, $cssProperties, $_dirs: $dirs) {
  $directionalDefinitions: ();

  @each $dirKey, $dirProperties in $_dirs {
    $newSelector: str-replace($selectorScheme, '{dirKey}', $dirKey);
    $properties: ();

    @each $dir in $dirProperties {
      @each $property in $cssProperties {
        $newProperty: str-replace($property, '{dir}', $dir);
        $properties: append($properties, $newProperty);
      }
    }

    $definitions: multipleDefinitions($newSelector, $selectorKeysAndPropertyValues, $properties);
    $directionalDefinitions: map-merge($directionalDefinitions, $definitions);
  }

  @return $directionalDefinitions;
}

// @include breakpoint('xs') { width: 90%; }
@mixin breakpoint($bpName, $breakpoints: $breakpoints) {
    $bpValue: map-get($breakpoints, $bpName);
    @media (min-width: $bpValue) { @content; }
}

@mixin createClasses($definitions) {
    @each $selector, $definition in $definitions {
        @include createSelector($selector, $definition)
    }
}

@mixin createResponsiveClasses($definitions, $_responsiveClassScheme: $responsiveClassScheme, $_breakpoints: $breakpoints) {
    @each $breakpoint, $value in $breakpoints {
        $responsiveSelectorBase: str-replace($_responsiveClassScheme, '{breakpoint}', $breakpoint);
        @include breakpoint($breakpoint, $breakpoints) {
            @each $selector, $definition in $definitions {
                $responsiveSelector: str-replace($responsiveSelectorBase, '{selector}', $selector);
                @include createSelector($responsiveSelector, $definition);
            }
        }
    }
}

// ------------------------------------------------------------------------
// Deprecated functions below
// ------------------------------------------------------------------------

/*
# Create multiple sized classes

```scss
@include createMultipleSizeClasses('Px', (sm: 1em, md: 2em), ('padding-left', 'padding-right'));
```

Output:

```scss
.Px-sm {
    padding-left: 1em;
    padding-right: 1em;
}

.Px-md {
    padding-left: 2em;
    padding-right: 2em;
}
```

 */
@mixin createMultipleSizeClasses($selectorPrefix, $sizes, $properties) {
    @warn "Deprecated in 0.4.0, see @function multipleDefinitions instead";
    @each $sizeName, $size in $sizes {
        $values: ();
        @each $property in $properties {
            $values: map-merge($values, ($property: $size));
        }

        @include createSelector(#{$selectorPrefix + '-' + $sizeName}, $values);
    }
}

/*
# Create multiple sized box classes

Create CSS classes (multiple sizes) of elements that have top, right, bottom & left values

```scss
@include createMultipleSizeBoxClasses('P{dirKey}', (xs: 1em, sm: 2em), 'padding-{dir}');
```

Will generate for example following classes

```scss
.Pt-xs {
    padding-top: 1em;
}

.Pt-sm {
    padding-top: 2em;
}

.Py-xs {
    padding-top: 1em;
    padding-bottom: 1em;
}

...
```
 */
@mixin createMultipleSizeBoxClasses($selectorName, $sizes, $cssProperty) {
    @warn "Deprecated in 0.4.0, see @function directionalDefinitions instead";
    @each $dirKey, $dirProperties in $dirs {
        $newSelector: str-replace($selectorName, '{dirKey}', $dirKey);
        $properties: ();

        @each $property in $dirProperties {
            $newProperty: str-replace($cssProperty, '{dir}', $property);
            $properties: append($properties, #{$newProperty});
        }
        @include createMultipleSizeClasses(#{$newSelector}, $sizes, $properties);
    }
}

/*
# Create multiple box classes

```scss
@include createMultipleBoxClasses('B{dirKey}-solid', ('border-{dir}-style': 'solid'));
```

Will generate for example following classes:

```scss
.Br-solid {
    border-right-style: solid;
}

.Bx-solid {
    border-right-style: solid;
    border-left-style: solid;
}

...
```

 */
@mixin createMultipleBoxClasses($selectorName, $cssProperties) {
  @warn "Deprecated in 0.4.0, see @function directionalDefinitions instead";
    @each $dirKey, $dirSelection in $dirs {
        $newSelector: str-replace($selectorName, '{dirKey}', $dirKey);
        $properties: ();

        @each $dir in $dirSelection {
            @each $prop, $value in $cssProperties {
                $newProperty: str-replace($prop, '{dir}', $dir);
                $properties: map-merge($properties, ($newProperty: $value));
            }
        }

        @include createSelector(#{$newSelector}, $properties);
    }
}
